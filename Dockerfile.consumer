# The first stage caches dependencies
FROM maven:3.9.10-amazoncorretto-21 AS dependencies

WORKDIR /app
COPY pom.xml .
COPY bom/pom.xml bom/pom.xml
COPY consumer/pom.xml consumer/pom.xml
COPY models/pom.xml models/pom.xml
COPY producer/pom.xml producer/pom.xml

RUN mvn -pl "models,consumer" -B -e org.apache.maven.plugins:maven-dependency-plugin:3.8.1:go-offline -DexcludeArtifacts=models

# The second stage builds the image
FROM maven:3.9.10-amazoncorretto-21 AS builder

WORKDIR /app
COPY --from=dependencies /root/.m2 /root/.m2
COPY --from=dependencies /app /app
COPY consumer/src /app/consumer/src
COPY models/src /app/models/src

RUN mvn -pl "models,consumer" -B -e clean install -DskipTests

# Okio file extraction doesn't work from within a Spring executable jar so
# we must extract all of the jar layers and combine them in the next stage
# See the following for context and an open Okio issue:
# https://github.com/square/wire/issues/3118
# https://github.com/square/wire/discussions/2209
# https://github.com/square/okio/issues/1112
RUN mv consumer/target/*.jar app.jar
RUN java -Djarmode=tools -jar app.jar extract --layers --launcher

# The third stage prepares the runtime environment
FROM openjdk:21-slim

# Reassemble extracted jar layers
WORKDIR /app
COPY --from=builder /app/app/dependencies/ ./
COPY --from=builder /app/app/spring-boot-loader/ ./
COPY --from=builder /app/app/snapshot-dependencies/ ./
COPY --from=builder /app/app/application/ ./
EXPOSE 8080

ENTRYPOINT ["java", "org.springframework.boot.loader.launch.JarLauncher"]
